{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["LevelBlock","className","App","React","useState","isIncreaseFlag","increaseWaterLevel","isDecreaseFlag","decreaseWaterLevel","levels","setLevels","useEffect","interval","setInterval","clearInterval","onClick","Array","from","length","_","i","ReactDOM","render","document","querySelector","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"0NAKMA,EAAa,kBAAM,qBAAMC,UAAY,qBAErCC,EAAM,WAAM,MAGgCC,IAAMC,UAAS,GAH/C,mBAGPC,EAHO,KAGSC,EAHT,OAIiCH,IAAMC,UAAS,GAJhD,mBAIPG,EAJO,KAISC,EAJT,OAKcL,IAAMC,SAAS,GAL7B,mBAKPK,EALO,KAKCC,EALD,KA6Cd,OA/BAP,IAAMQ,WAAU,WACd,IAAIC,EACJ,GAAIP,EAAgB,CAClB,GAAIE,EAEF,YADAD,GAAoB,GAGlBG,EAAS,IACXG,EAAWC,aAAY,WAfCH,GAAU,kBAAMD,EAAS,OAiB9C,MAGP,OAAO,kBAAMK,cAAcF,MAC1B,CAACP,EAAgBE,EAAgBE,IAGpCN,IAAMQ,WAAU,WACd,IAAIC,EACJ,GAAIJ,EAAqB,CACvB,GAAe,IAAXC,GAAgBJ,EAElB,YADAG,GAAoB,GAGtBI,EAAWC,aAAY,WA9BGH,GAAU,kBAAMD,EAAS,OAgChD,KAEL,OAAO,kBAAMK,cAAcF,MAC1B,CAACP,EAAgBE,EAAgBE,IAGlC,sBAAKR,UAAY,UAAjB,UACE,sBAAKA,UAAY,kBAAjB,UACE,wBAAQc,QAtCe,kBAAMT,GAAoB,IAsCjD,wBACA,wBAAQS,QAtCe,kBAAMP,GAAqB,IAsClD,2BAEF,qBAAKP,UAAY,oBAAjB,SAEEe,MAAMC,KAAK,CACTC,OAAQT,IACL,SAACU,EAAGC,GAAJ,OAAU,cAAE,EAAF,GAAoBA,YAO3CC,IAASC,OAAQ,cAAE,EAAF,IAAWC,SAASC,cAAc,UAEpCtB,QC3DFuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdL,IAASC,OACP,cAAC,IAAMY,WAAP,UACE,cAAC,EAAD,MAEFX,SAASY,eAAe,SAM1BV,K","file":"static/js/main.d7e318ac.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nconst LevelBlock = () => < div className = \"waterLevelBlock\" /> ;\n\nconst App = () => {\n    // Can be converted to custom hook.\n    // Here can be one state is used via useReducer.\n    const [isIncreaseFlag, increaseWaterLevel ] = React.useState(false);\n    const [isDecreaseFlag, decreaseWaterLevel  ] = React.useState(false);\n    const [levels, setLevels] = React.useState(0);\n\n    const onIncreaseLevel = () => setLevels(() => levels + 1);\n    const onDecreaseLevel = () => setLevels(() => levels - 1);\n\n    const onIncreaseWaterLevel = () => increaseWaterLevel (true);\n    const onDecreaseWaterLevel = () => decreaseWaterLevel  (true);\n\n    // Increase Level\n    React.useEffect(() => {\n      let interval;\n      if (isIncreaseFlag) {\n        if (isDecreaseFlag) {\n          increaseWaterLevel (false)\n          return;\n        }\n        if (levels < 5)\n          interval = setInterval(() => {\n            onIncreaseLevel()\n          }, 2000)\n\n      }\n      return () => clearInterval(interval);\n    }, [isIncreaseFlag, isDecreaseFlag, levels])\n\n    // Decrease Level\n    React.useEffect(() => {\n      let interval;\n      if (decreaseWaterLevel ) {\n        if (levels === 0 || isIncreaseFlag) {\n          decreaseWaterLevel (false)\n          return;\n        }\n        interval = setInterval(() => {\n          onDecreaseLevel()\n        }, 2000)\n      }\n      return () => clearInterval(interval);\n    }, [isIncreaseFlag, isDecreaseFlag, levels])\n\n    return ( \n      <div className = \"wrapper\" >\n        <div className = \"buttonContainer\" >\n          <button onClick = {onIncreaseWaterLevel} > Increase </button> \n          <button onClick = {onDecreaseWaterLevel} > Decrease </button> \n        </div > \n        <div className = \"waterLevelCounter\" > \n          {\n          Array.from({\n            length: levels\n            }, (_, i) => < LevelBlock key = {i} />)\n          } \n        </div> \n      </div>\n      );\n    }\n\n  ReactDOM.render( < App/ > , document.querySelector(\"#root\"))\n\n  export default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}